# Welcome to our first scene! :)

# We will go together step by step in this first instruction file.
# As you probably noticed, all lines starting with a 'hash' symbol
# are considered comments, hence they are skipped by the compiler.


### MATERIALS ###
# the declaration of materials is intuitive. Just follow along:

material skyMat(               # this is just the name of the variable
    diffuse(                   # here we specify the BRDF type (namely diffuse or specular)
            uniform(           # here we specify the diffusive pigment type (uniform, checkered or image)
                   <0,0,0>     # diffusive color (colors need ANGULAR BRACKETS!)
                    )
            ),  
    uniform(                   # another pigment to specify emitted radiance
        <0.529, 0.808, 0.922> # emitted color
        ) 
)

# Ok, we have defined out first material. Now we define another one, but with a checkered pigment!

material groundMat(
    diffuse(checkered(<0.3, 0.5, 0.1>, # first color
                      <0.1, 0.2, 0.5>, # second color
                       4)),            # number of 'iterations' of the ckeckered pattern
    uniform(<0,0,0>)                   # the ground does not radiate light 
)

# Let's go with another one. Just remember that any material requires a BRDF and a Pigment

material sphereMat(
    specular(uniform(<0.8, 0.1, 0.1>)),
    uniform(<0,0,0>)
)

### TRANSFORMATIONS ###

# The transformations available are scalings, rotations and translations.
# Each one of them takes a vector in input: a vector is defined between square brackets.
#Â Transformations are to be passed to shapes when declaring them.

### SHAPES ###

# We need to add the shapes to the scene. We can add many different kind of shapes,
# but we will start with a simple sphere and a plane
# the generic constructor for basic shapes is
# shape shapeName (material, transformation)

# Let's declare the "sky"
sphere(
        skyMat,  # Using pre-declared variables comes in handy!
        scaling([250,250,250]) # we make a very big sphere
      )

# Now it's time for the checkered plane:
plane ( groundMat, identity)  # identity means 'no transformation'

# Now, we define a sphere associated to a composite transformation
# in order to compose transformations, multiply them as if they were
# matrix operators (the one to the most right will operate first, and so on)

sphere(sphereMat, scaling([2,2,2])*translation([-0.8,0, 0.25]))

### CAMERA ###
# For each scene, you must define one (and only one!) camera. 
# It can either be perspective or orthogonal, and you can associate a transformation to the camera
# The syntax for cameras is 
# camera cameraName ( type, transf, aspect ratio, screen distance)

camera(perspective, translation([-4, 0, 1]), 1.0, 1.0)

# We've declared everything we needed! We are now ready to execute the program!
# move to the NM4PIG/NM4PIG folder and the launch
# dotnet run -- render --file Examples/Inputs/Scene1/scene1.txt --width 1000 --height 700 --ldr Examples/Inputs/Scene1/scene1.jpg --spp 4

# We wil go deeper into the arguments passed in the following tutorials!
# For now, enjoy the image you've just created :)
